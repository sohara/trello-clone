// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  boards        Board[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Board {
  id     String @id @default(cuid())
  title  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")
  lists  List[]
  cards  Card[]

  @@map("boards")
}

model List {
  id      String @id @default(cuid())
  title   String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String @map("board_id")
  cards   Card[]

  @@map("lists")
}

model Card {
  id          String  @id @default(cuid())
  board       Board?  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId     String? @map("board_id")
  list        List    @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId      String  @map("list_id")
  title       String
  description String?
  // order         Int       @default(0)

  @@map("cards")
}
